{{ if .Values.jenkins.enabled -}}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}-jenkins-jobs
  labels:
    app: {{ template "fullname" . }}
data:
  create-jobs.sh: |-
    #!/bin/bash
    ls /jobs/ | grep "[.]xml" > /tmp/jobs.txt
    while read LINE; do
      NAME=$(echo ${LINE} | awk -F'[.]xml' '{print $1}')
      URL="http://{{ .Release.Name }}-jenkins:8080/job/${NAME}/api/json"
      STATUS="$(curl -Is ${URL} 2>/dev/null | head -n 1 | awk '{print $2}')"
      if [ "${STATUS}" != "200" ]; then
        echo "### create.. [${LINE}] [${NAME}]"
        curl -X POST -H "Content-Type: application/xml" \
          --retry "20" \
          --retry-delay "10" \
          --max-time "7" \
          --data-binary "@/jobs/${LINE}" \
          "http://{{ .Release.Name }}-jenkins:8080/createItem?name=${NAME}"
        echo "### created. [${LINE}] [${NAME}]"
      fi
    done < /tmp/jobs.txt
  build-command.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <flow-definition plugin="workflow-job@2.17">
      <actions/>
      <description></description>
      <keepDependencies>false</keepDependencies>
      <properties>
        <hudson.model.ParametersDefinitionProperty>
          <parameterDefinitions>
            <hudson.model.StringParameterDefinition>
              <name>EXECUTOR_IMAGE</name>
              <description></description>
              <defaultValue>nalbam/builder:alpine</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>REPOSITORY_URL</name>
              <description></description>
              <defaultValue>https://github.com/nalbam/sample-web</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>BRANCH</name>
              <description></description>
              <defaultValue>master</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>COMMAND</name>
              <description></description>
              <defaultValue>whoami && pwd && ls -al</defaultValue>
            </hudson.model.StringParameterDefinition>
          </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
          <triggers/>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      </properties>
      <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.45">
        <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
    properties([
      buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
    ])
    podTemplate(label: label, containers: [
      containerTemplate(name: &quot;executor&quot;, image: &quot;$EXECUTOR_IMAGE&quot;, command: &quot;cat&quot;, ttyEnabled: true)
    ],
    volumes: [
      hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;)
    ]) {
      node(label) {
        stage(&quot;Checkout&quot;) {
          checkout([$class: &quot;GitSCM&quot;,
            branches: [[name: &quot;$BRANCH&quot;]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[url: &quot;$REPOSITORY_URL&quot;]]]
          )
        }
        stage(&quot;Command&quot;) {
          container(&quot;executor&quot;) {
            sh &quot;$COMMAND&quot;
          }
        }
      }
    }
        </script>
        <sandbox>true</sandbox>
      </definition>
      <triggers/>
      <disabled>false</disabled>
    </flow-definition>
  build-image.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <flow-definition plugin="workflow-job@2.17">
      <actions/>
      <description></description>
      <keepDependencies>false</keepDependencies>
      <properties>
        <hudson.model.ParametersDefinitionProperty>
          <parameterDefinitions>
            <hudson.model.StringParameterDefinition>
              <name>EXECUTOR_IMAGE</name>
              <description></description>
              <defaultValue>nalbam/builder:node</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>REPOSITORY_URL</name>
              <description></description>
              <defaultValue>https://github.com/nalbam/sample-node</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>BRANCH</name>
              <description></description>
              <defaultValue>master</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>IMAGE_REPO</name>
              <description></description>
              <defaultValue>{{ .Release.Name }}-docker-registry:5000/sample</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>IMAGE_NAME</name>
              <description></description>
              <defaultValue>sample-node</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>IMAGE_TAG</name>
              <description></description>
              <defaultValue>latest</defaultValue>
            </hudson.model.StringParameterDefinition>
          </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
          <triggers/>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      </properties>
      <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.45">
        <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
    properties([
      buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
    ])
    podTemplate(label: label, containers: [
      containerTemplate(name: &quot;executor&quot;, image: &quot;$EXECUTOR_IMAGE&quot;, command: &quot;cat&quot;, ttyEnabled: true)
    ],
    volumes: [
      hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;)
    ]) {
      node(label) {
        stage(&quot;Checkout&quot;) {
          checkout([$class: &quot;GitSCM&quot;,
            branches: [[name: &quot;$BRANCH&quot;]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[url: &quot;$REPOSITORY_URL&quot;]]]
          )
        }
        stage(&quot;Build Image&quot;) {
          container(&quot;executor&quot;) {
            sh &quot;docker build -t $IMAGE_REPO/$IMAGE_NAME:$IMAGE_TAG .&quot;
          }
        }
        stage(&quot;Push Image&quot;) {
          container(&quot;executor&quot;) {
            sh &quot;docker push $IMAGE_REPO/$IMAGE_NAME:$IMAGE_TAG&quot;
          }
        }
      }
    }
        </script>
        <sandbox>true</sandbox>
      </definition>
      <triggers/>
      <disabled>false</disabled>
    </flow-definition>
  build-maven.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <flow-definition plugin="workflow-job@2.17">
      <actions/>
      <description></description>
      <keepDependencies>false</keepDependencies>
      <properties>
        <hudson.model.ParametersDefinitionProperty>
          <parameterDefinitions>
            <hudson.model.StringParameterDefinition>
              <name>EXECUTOR_IMAGE</name>
              <description></description>
              <defaultValue>nalbam/builder:maven</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>REPOSITORY_URL</name>
              <description></description>
              <defaultValue>https://github.com/nalbam/sample-spring</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>BRANCH</name>
              <description></description>
              <defaultValue>master</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>TEST</name>
              <description></description>
              <defaultValue>mvn test</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>COMMAND</name>
              <description></description>
              <defaultValue>mvn package -DskipTests</defaultValue>
            </hudson.model.StringParameterDefinition>
          </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
          <triggers/>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      </properties>
      <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.45">
        <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
    properties([
      buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
    ])
    podTemplate(label: label, containers: [
      containerTemplate(name: &quot;executor&quot;, image: &quot;$EXECUTOR_IMAGE&quot;, command: &quot;cat&quot;, ttyEnabled: true)
    ],
    volumes: [
      hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;)
    ]) {
      node(label) {
        stage(&quot;Checkout&quot;) {
          checkout([$class: &quot;GitSCM&quot;,
            branches: [[name: &quot;$BRANCH&quot;]],
            doGenerateSubmoduleConfigurations: false,
            extensions: [],
            submoduleCfg: [],
            userRemoteConfigs: [[url: &quot;$REPOSITORY_URL&quot;]]]
          )
        }
        stage(&quot;Test&quot;) {
          container(&quot;executor&quot;) {
            sh &quot;$TEST&quot;
          }
        }
        stage(&quot;Build&quot;) {
          container(&quot;executor&quot;) {
            sh &quot;$COMMAND&quot;
          }
        }
        stage(&quot;Result&quot;) {
          junit &quot;**/target/surefire-reports/TEST-*.xml&quot;
          archive &quot;target/*.jar&quot;
        }
      }
    }
        </script>
        <sandbox>true</sandbox>
      </definition>
      <triggers/>
      <disabled>false</disabled>
    </flow-definition>
  deploy-image.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <flow-definition plugin="workflow-job@2.17">
      <actions/>
      <description></description>
      <keepDependencies>false</keepDependencies>
      <properties>
        <hudson.model.ParametersDefinitionProperty>
          <parameterDefinitions>
            <hudson.model.StringParameterDefinition>
              <name>EXECUTOR_IMAGE</name>
              <description></description>
              <defaultValue>nalbam/builder:alpine</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>IMAGE_REPO</name>
              <description></description>
              <defaultValue>{{ .Release.Name }}-docker-registry:5000/sample</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>IMAGE_NAME</name>
              <description></description>
              <defaultValue>sample-node</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>IMAGE_TAG</name>
              <description></description>
              <defaultValue>latest</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>NAMESPACE</name>
              <description></description>
              <defaultValue>default</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>DEPLOY_NAME</name>
              <description></description>
              <defaultValue>sample-node</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>REPLICAS</name>
              <description></description>
              <defaultValue>1</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>SERVICE_TYPE</name>
              <description></description>
              <defaultValue>ClusterIP</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>CONTANER_PORT</name>
              <description></description>
              <defaultValue>3000</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>SERVICE_PORT</name>
              <description></description>
              <defaultValue>80</defaultValue>
            </hudson.model.StringParameterDefinition>
          </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
          <triggers/>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      </properties>
      <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.45">
        <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
    properties([
      buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
    ])
    podTemplate(label: label, containers: [
      containerTemplate(name: &quot;executor&quot;, image: &quot;$EXECUTOR_IMAGE&quot;, command: &quot;cat&quot;, ttyEnabled: true)
    ],
    volumes: [
      hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;)
    ]) {
      node(label) {
        stage(&quot;Pull Image&quot;) {
          container(&quot;executor&quot;) {
            sh &quot;docker pull $IMAGE_REPO/$IMAGE_NAME:$IMAGE_TAG&quot;
          }
        }
      }
    }
        </script>
        <sandbox>true</sandbox>
      </definition>
      <triggers/>
      <disabled>false</disabled>
    </flow-definition>
  run-command.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <flow-definition plugin="workflow-job@2.17">
      <actions/>
      <description></description>
      <keepDependencies>false</keepDependencies>
      <properties>
        <hudson.model.ParametersDefinitionProperty>
          <parameterDefinitions>
            <hudson.model.StringParameterDefinition>
              <name>EXECUTOR_IMAGE</name>
              <description></description>
              <defaultValue>lachlanevenson/k8s-kubectl:latest</defaultValue>
            </hudson.model.StringParameterDefinition>
            <hudson.model.StringParameterDefinition>
              <name>COMMAND</name>
              <description></description>
              <defaultValue>kubectl get all --all-namespaces</defaultValue>
            </hudson.model.StringParameterDefinition>
          </parameterDefinitions>
        </hudson.model.ParametersDefinitionProperty>
        <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
          <triggers/>
        </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      </properties>
      <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.45">
        <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
    properties([
      buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
    ])
    podTemplate(label: label, containers: [
      containerTemplate(name: &quot;executor&quot;, image: &quot;$EXECUTOR_IMAGE&quot;, command: &quot;cat&quot;, ttyEnabled: true)
    ],
    volumes: [
      hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;)
    ]) {
      node(label) {
        stage(&quot;Command&quot;) {
          container(&quot;executor&quot;) {
            sh &quot;$COMMAND&quot;
          }
        }
      }
    }
        </script>
        <sandbox>true</sandbox>
      </definition>
      <triggers/>
      <disabled>false</disabled>
    </flow-definition>
  sample.xml: |-
    <?xml version='1.0' encoding='UTF-8'?>
    <flow-definition plugin="workflow-job@2.17">
      <actions/>
      <description></description>
      <keepDependencies>false</keepDependencies>
      <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.45">
        <script>def label = &quot;worker-${UUID.randomUUID().toString()}&quot;
    properties([
      buildDiscarder(logRotator(daysToKeepStr: &quot;60&quot;, numToKeepStr: &quot;10&quot;))
    ])
    podTemplate(label: label, containers: [
      containerTemplate(name: &quot;builder&quot;, image: &quot;nalbam/builder:alpine&quot;, command: &quot;cat&quot;, ttyEnabled: true),
      containerTemplate(name: &quot;kubectl&quot;, image: &quot;lachlanevenson/k8s-kubectl:latest&quot;, command: &quot;cat&quot;, ttyEnabled: true),
      containerTemplate(name: &quot;helm&quot;, image: &quot;lachlanevenson/k8s-helm:latest&quot;, command: &quot;cat&quot;, ttyEnabled: true)
    ],
    volumes: [
      hostPathVolume(mountPath: &quot;/var/run/docker.sock&quot;, hostPath: &quot;/var/run/docker.sock&quot;)
    ]) {
      node(label) {
        stage(&quot;Info&quot;) {
          sh &quot;uname -a&quot;
        }
        stage(&quot;Run docker&quot;) {
          container(&quot;builder&quot;) {
            sh &quot;docker images&quot;
          }
        }
        stage(&quot;Run kubectl&quot;) {
          container(&quot;kubectl&quot;) {
            sh &quot;kubectl get pod,svc&quot;
          }
        }
        stage(&quot;Run helm&quot;) {
          container(&quot;helm&quot;) {
            sh &quot;helm list&quot;
          }
        }
      }
    }
        </script>
        <sandbox>true</sandbox>
      </definition>
      <triggers/>
      <disabled>false</disabled>
    </flow-definition>
{{ end -}}
